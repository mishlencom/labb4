# Альтернативні таблиці для S-блоку
S_BOX = {
    0b0000: 0b1001, 0b0001: 0b0100, 0b0010: 0b1010, 0b0011: 0b1011,
    0b0100: 0b1101, 0b0101: 0b0001, 0b0110: 0b1000, 0b0111: 0b0101,
    0b1000: 0b0110, 0b1001: 0b1100, 0b1010: 0b1111, 0b1011: 0b0011,
    0b1100: 0b0111, 0b1101: 0b1110, 0b1110: 0b0000, 0b1111: 0b0010,
}

# Створимо зворотну таблицю для S-блоку
REVERSE_S_BOX = {v: k for k, v in S_BOX.items()}

# Альтернативна перестановка для P-блоку
P_BOX_PERMUTATION = [2, 4, 6, 0, 1, 7, 5, 3]

def s_box_transform(data, s_box):
    """ Пряме перетворення через S-блок. """
    high_nibble = (data >> 4) & 0b1111
    low_nibble = data & 0b1111
    return (s_box[high_nibble] << 4) | s_box[low_nibble]

def s_box_reverse_transform(data, reverse_s_box):
    """ Зворотне перетворення через S-блок. """
    high_nibble = (data >> 4) & 0b1111
    low_nibble = data & 0b1111
    return (reverse_s_box[high_nibble] << 4) | reverse_s_box[low_nibble]

def p_box_permute(data, permutation):
    """ Пряме перетворення через P-блок. """
    permuted_data = 0
    for i, bit_position in enumerate(permutation):
        bit = (data >> bit_position) & 1
        permuted_data |= (bit << (7 - i))
    return permuted_data

def p_box_reverse_permute(data, permutation):
    """ Зворотне перетворення через P-блок. """
    reverse_permutation = [permutation.index(i) for i in range(8)]
    reverse_data = 0
    for i, bit_position in enumerate(reverse_permutation):
        bit = (data >> (7 - i)) & 1
        reverse_data |= (bit << bit_position)
    return reverse_data

def encrypt(data):
    """ Шифрування: послідовне застосування S-блоку та P-блоку. """
    s_transformed = s_box_transform(data, S_BOX)
    p_permuted = p_box_permute(s_transformed, P_BOX_PERMUTATION)
    return p_permuted

def decrypt(data):
    """ Розшифрування: послідовне застосування зворотного P-блоку та S-блоку. """
    p_reversed = p_box_reverse_permute(data, P_BOX_PERMUTATION)
    s_reversed = s_box_reverse_transform(p_reversed, REVERSE_S_BOX)
    return s_reversed

# Тестування з різними вхідними даними
test_data = [0b11001100, 0b10101010, 0b11110000, 0b00011111]
for original_data in test_data:
    encrypted_data = encrypt(original_data)
    decrypted_data = decrypt(encrypted_data)
    print(f"Оригінальні дані: {bin(original_data)}")
    print(f"Зашифровані дані: {bin(encrypted_data)}")
    print(f"Розшифровані дані: {bin(decrypted_data)}")
    print("-" * 30)
